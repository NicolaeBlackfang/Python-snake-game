import pygame
import time
import random
import os

# Initialize pygame
pygame.init()

# Colors
white = (255, 255, 255)
black = (0, 0, 0)
red = (213, 50, 80)
green = (0, 255, 0)
blue = (50, 153, 213)

# Screen dimensions
width = 600
height = 400
dis = pygame.display.set_mode((width, height))
pygame.display.set_caption('Snake Game')

# Load background image
try:
    background_img = pygame.image.load("background.jpg")
    background_img = pygame.transform.scale(background_img, (width, height))
except:
    background_img = None  # fallback if image not found

clock = pygame.time.Clock()
block_size = 10
speed = 15

# Fonts
font_style = pygame.font.SysFont("bahnschrift", 25)
score_font = pygame.font.SysFont("comicsansms", 30)

# High score file
high_score_file = "highscore.txt"

def get_high_score():
    if os.path.exists(high_score_file):
        with open(high_score_file, "r") as f:
            return int(f.read().strip())
    return 0

def save_high_score(score):
    with open(high_score_file, "w") as f:
        f.write(str(score))

def score_display(score, high_score):
    value = score_font.render(f"Score: {score}  High Score: {high_score}", True, white)
    dis.blit(value, [10, 10])

def draw_snake(snake_list):
    for block in snake_list:
        pygame.draw.rect(dis, green, [block[0], block[1], block_size, block_size])

def message(msg, color):
    mesg = font_style.render(msg, True, color)
    dis.blit(mesg, [width / 6, height / 3])

def game_loop():
    game_over = False
    game_close = False

    x1 = width / 2
    y1 = height / 2
    x1_change = 0
    y1_change = 0

    snake_list = []
    length_of_snake = 1

    foodx = round(random.randrange(0, width - block_size) / 10.0) * 10.0
    foody = round(random.randrange(0, height - block_size) / 10.0) * 10.0

    high_score = get_high_score()

    while not game_over:
        while game_close:
            if background_img:
                dis.blit(background_img, (0, 0))
            else:
                dis.fill(blue)
            message("You Lost! Press C to Play Again or Q to Quit", red)
            score_display(length_of_snake - 1, high_score)
            pygame.display.update()

            for event in pygame.event.get():
                if event.type == pygame.KEYDOWN:
                    if event.key == pygame.K_q:
                        game_over = True
                        game_close = False
                    if event.key == pygame.K_c:
                        game_loop()

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                game_over = True
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_LEFT:
                    x1_change = -block_size
                    y1_change = 0
                elif event.key == pygame.K_RIGHT:
                    x1_change = block_size
                    y1_change = 0
                elif event.key == pygame.K_UP:
                    y1_change = -block_size
                    x1_change = 0
                elif event.key == pygame.K_DOWN:
                    y1_change = block_size
                    x1_change = 0

        if x1 >= width or x1 < 0 or y1 >= height or y1 < 0:
            game_close = True

        x1 += x1_change
        y1 += y1_change

        if background_img:
            dis.blit(background_img, (0, 0))
        else:
            dis.fill(black)

        pygame.draw.rect(dis, red, [foodx, foody, block_size, block_size])
        snake_head = [x1, y1]
        snake_list.append(snake_head)
        if len(snake_list) > length_of_snake:
            del snake_list[0]

        for segment in snake_list[:-1]:
            if segment == snake_head:
                game_close = True

        draw_snake(snake_list)
        score_display(length_of_snake - 1, high_score)
        pygame.display.update()

        if x1 == foodx and y1 == foody:
            foodx = round(random.randrange(0, width - block_size) / 10.0) * 10.0
            foody = round(random.randrange(0, height - block_size) / 10.0) * 10.0
            length_of_snake += 1
            if length_of_snake - 1 > high_score:
                high_score = length_of_snake - 1
                save_high_score(high_score)

        clock.tick(speed)

    pygame.quit()
    quit()

game_loop()
